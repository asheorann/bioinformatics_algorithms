'''
Given a profile matrix Profile, we can evaluate the probability
of every k-mer in a string Text and find a Profile-most probable k-mer in Text, i.e.,
a k-mer that was most likely to have been generated by Profile among all k-mers in Text.
For example, ACGGGGATTACC is the Profile-most probable 12-mer in GGTACGGGGATTACCT. 
Indeed, every other 12-mer in this string has probability 0. In general, if there are 
multiple Profile-most probable k-mers in Text, then we select the first such k-mer occurring in Text.

Profile-most Probable k-mer Problem: Find a Profile-most probable k-mer in a string.

Input: A string Text, an integer k, and a 4 Ã— k matrix Profile.
Output: A Profile-most probable k-mer in Text.

Sample Input:

ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
5
0.2 0.2 0.3 0.2 0.3
0.4 0.3 0.1 0.5 0.1
0.3 0.3 0.5 0.2 0.4
0.1 0.2 0.1 0.1 0.2
Sample Output:

CCGAG
'''

import sys

# Please do not remove package declarations because these are used by the autograder.

# Insert your profile_most_probable_kmer function here, along with any subroutines you need.


def profile_most_probable_kmer(text: str, k: int,
                               profile: list[dict[str, float]]) -> str:
    """Identifies the most probable k-mer according to a given profile matrix.

    The profile matrix is represented as a list of columns, where the i-th element is a map
    whose keys are strings ("A", "C", "G", and "T") and whose values represent the probability
    associated with this symbol in the i-th column of the profile matrix.
    """
    consensus =""
    #print(consensus)
    best = 0
    length = len(text)
    for j in range(length-k+1):
        prob = 1.0
        test = text[j:j+k]
        for i in range(k):
            n = test[i]
            prob *=profile[i][n]
        if prob>best:
            best = prob
            final=test
    return final